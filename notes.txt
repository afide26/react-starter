Lesson - Multiple Components in Sync
- In this lesson, the Application has changed with the following hierarchy:
App
  - Navbar
  - Counters
    - Counter
**However, the counters state is not shared between the Navbar and Counters components. In cases like this, we need to move the state up to App, which is the parent component of both Navbar and Counters and pass them as props.

Lesson - Lifting the State Up
  In this lesson, all the state and methods of Counters component were moved to App component
  Notes:
    - The methods were passed as props and by convention the props were named with 'on' prefix
      e.g. onDelete, onReset and onIncrement and passed the reference of the methods performing the actions.

Lesson - Implementing Value Counter
  In this lesson, after the state has been moved to the App component, a new props was passed to the Navigation component to count the number of items that have values higher than 0
  totalCounters={this.state.counters.filter(c => c.value > 0).length}
  ** check the chaining of length to the filtered totalCounters

Lesson - Stateless Functional Components and Destructuring
  Converted Counters and Navigation to SFC and destructured variables of props

Lesson - Main Lifecycle Hooks of a component
  Mount - When a new instance of a component is created, the following methods are called in order:
    1. constructor()
    2. render()
    3. componentDidMount
  Update - when the state changes
    1. render()
    2. componentDidUpdate()
  Unmount - when the component is deleted from the virtual DOM and the DOM tree
    1. componentWillUnmount()